<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:it="http://richfaces.org/iteration" xmlns:a4j="http://richfaces.org/a4j">
<f:view contentType="text/html" />

<h:head>
    <title>Richfaces Tree</title>

    <h:outputStylesheet>/*<![CDATA[*/
	.customClass .customNodeClass {
		border: 1px solid navy;
	}

	.customClass .customHandleClass {
		border: 1px solid red;
	}

	.customClass .customIconClass {
		border: 1px solid yellow;
	}

	.customClass .customLabelClass {
		border: 1px solid green;
	}

	.loadingWithoutFacet .rf-trn-ldn .rf-trn-hnd {
		cursor: default;
		background-image: url(#{facesContext.externalContext.requestContextPath}/images/loading.gif);
	}

	/*]]>*/
    </h:outputStylesheet>
</h:head>

<h:body>
    <h:outputScript>
    function nodesArrayToString(nodes) {
    var result = new Array();
    jQuery.each(nodes, function(k, v) {
    result.push(v.getId());
    });

    return result.join('');
    }

    function getNodeStateString(treeNode) {
    return treeNode.isLeaf() ?
    'leaf'
    : (treeNode.isExpanded() ? 'expanded' : 'collapsed');
    }

    function handleNodeToggle(nodeData, event, isTreeNodeLevel) {
    var treeNode = RichFaces.$(event.target);
    RichFaces.log.info('Toggle event ' + (isTreeNodeLevel ? '(treeNode level)' : '')
    + '[' + nodeData + ']:\n ' + treeNode.getId() + ' became ' + getNodeStateString(treeNode));
    }

    function handleBeforeNodeToggle(event, isTreeNodeLevel) {
    var treeNode = RichFaces.$(event.target);
    return confirm('Tree' + (isTreeNodeLevel ? ' node ' : ' ') + 'asks: really toggle node ' + treeNode.getId() + '?');
    }

    function handleBeforeNodeSelect(event) {
    var treeNode = RichFaces.$(event.target);

    var oldSelectionString = nodesArrayToString(event.rf.data.oldSelection);
    var newSelectionString = nodesArrayToString(event.rf.data.newSelection);

    return confirm('Selection will be changed from: [' + oldSelectionString + '] to: [' + newSelectionString + ']');
    }

    function handleNodeSelect(event) {
    var treeNode = RichFaces.$(event.target);

    var oldSelectionString = nodesArrayToString(event.rf.data.oldSelection);
    var newSelectionString = nodesArrayToString(event.rf.data.newSelection);

    RichFaces.log.info('Selection changed from: [' + oldSelectionString + '] to: [' + newSelectionString + ']');
    }
</h:outputScript>

    <h:messages id="messages" />

    <h:form>
    Toggle mode:
    <h:selectOneRadio value="#{treeBean.toggleType}" onclick="submit()">
            <f:selectItems value="#{treeBean.types}" var="item" itemValue="#{item}" />
        </h:selectOneRadio>

    Selection mode:
    <h:selectOneRadio value="#{treeBean.selectionType}" onclick="submit()">
            <f:selectItems value="#{treeBean.types}" itemDisabled="#{item == 'server'}" var="item" itemValue="#{item}" />
        </h:selectOneRadio>

    Show custom classes:
    <h:selectBooleanCheckbox value="#{treeBean.showCustomClasses}" onclick="submit()" />

        <br />
    Toggle node event:
    <h:selectOneMenu value="#{treeBean.toggleNodeEvent}" onchange="submit()">
            <f:selectItem itemLabel="none" itemValue="" />
            <f:selectItem itemLabel="click" itemValue="click" />
            <f:selectItem itemLabel="mouseenter" itemValue="mouseenter" />
            <f:selectItem itemLabel="dblclick" itemValue="dblclick" />
        </h:selectOneMenu>
    </h:form>

    <h:form id="form">
    Base tree:
    <it:tree id="tree" nodeType="#{node.parent == null ? 'rootNode': 'childNode'}" var="node" value="#{treeBean.rootNodes}"
            selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}" selection="#{treeBean.selection}">

            <it:treeToggleListener listener="#{treeBean.toggleActionListenerImpl.processToggleAction}" />
            <it:treeSelectionChangeListener binding="#{treeBean.selectionChangeActionListener}"
                type="org.richfaces.demo.SelectionChangeActionListenerImpl" />

            <it:treeNode type="rootNode">
                <h:panelGroup id="rootNodeGroup">
                Root node: #{node.data} -
                <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages" />
                    </h:commandLink>
                </h:panelGroup>
            </it:treeNode>
            <it:treeNode type="childNode">
                <h:panelGroup id="childNodeGroup">
                #{node.data} -
                <h:commandLink value="link" action="#{treeBean.clickNode}">
                        <f:ajax render=":messages" />
                    </h:commandLink>
                </h:panelGroup>
            </it:treeNode>
        </it:tree>

        <h:commandLink value="Re-render">
            <f:ajax render=":form:tree" execute="@all" />
        </h:commandLink>

    org.richfaces.model.TreeNode support:
    <it:tree id="treeNodeSupport" value="#{treeBean.classicTreeNode}" var="node" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}" rowKeyConverter="#{treeBean.integerSequenceKeyConveter}">
            <it:treeNode>
            #{node.data} -
            <h:commandLink value="link" action="#{treeBean.clickNode}">
                    <f:ajax render=":messages" />
                </h:commandLink>
            </it:treeNode>
        </it:tree>

    org.richfaces.model.TreeDataModel support:
    <it:tree id="treeDataModelSupport" value="#{treeBean.treeDataModel}" var="node" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}" rowKeyConverter="#{treeBean.integerSequenceKeyConveter}">
            <it:treeNode>
            #{node.data} -
            <h:commandLink value="link" action="#{treeBean.clickNode}">
                    <f:ajax render=":messages" />
                </h:commandLink>
            </it:treeNode>
        </it:tree>

    Tree with customized look:
    <it:tree id="customizedTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}" styleClass="#{treeBean.showCustomClasses ? 'customClass' : ''}"
            nodeClass="customNodeClassFromTree" handleClass="customHandleClassFromTree" iconClass="customIconClassFromTree"
            labelClass="customLabelClassFromTree">

            <it:treeNode iconLeaf="/images/leaf.png" iconExpanded="/images/minus.png" iconCollapsed="/images/plus.png"
                styleClass="customNodeClass" handleClass="customHandleClass" iconClass="customIconClass"
                labelClass="customLabelClass">
            #{node.data}
        </it:treeNode>
        </it:tree>

    Tree with default node:
    <it:tree id="defaultNodeTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}">
        </it:tree>

    Tree with client-side event handlers:
    <it:tree id="clientSideEventsTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}" onnodetoggle="handleNodeToggle(&quot;#{node.data}&quot;, event, false)"
            onselectionchange="handleNodeSelect(event)" onbeforeselectionchange="return handleBeforeNodeSelect(event)"
            onbeforenodetoggle="return handleBeforeNodeToggle(event, false)">

            <it:treeNode ontoggle="handleNodeToggle(&quot;#{node.data}&quot;, event, true)"
                onbeforetoggle="return handleBeforeNodeToggle(event, true)">
            #{node.data}
        </it:treeNode>
        </it:tree>

    Tree with attached behaviors:
    <h:messages id="treeBehaviorsMessages" for="behaviorsAttachedTree" />
        <h:messages id="treeNodeBehaviorsMessages" globalOnly="true" />

        <it:tree id="behaviorsAttachedTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}">

            <f:ajax event="nodetoggle" listener="#{treeBean.behaviorToggleListener}" render=":form:treeBehaviorsMessages" />
            <f:ajax event="selectionchange" listener="#{treeBean.behaviorSelectionChangeListener}"
                render=":form:treeBehaviorsMessages :form:treeNodeBehaviorsMessages" />

            <it:treeNode>
            #{node.data}

            <f:ajax event="toggle" listener="#{treeBean.behaviorToggleListener}" render=":form:treeNodeBehaviorsMessages" />
            </it:treeNode>
        </it:tree>

    Lazy loaded tree:
    <it:tree id="lazyLoadedTree" var="node" value="#{treeBean.lazyRootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}">

            <it:treeNode>
            #{node.wrappedNode.data}
        </it:treeNode>
        </it:tree>

        <a4j:outputPanel ajaxRendered="true">
            <h:messages for="serverListenersTree" />
        </a4j:outputPanel>

    Server listeners test:
    <it:tree id="serverListenersTree" var="node" value="#{treeBean.rootNodes}" selectionType="#{treeBean.selectionType}"
            toggleType="#{treeBean.toggleType}" selectionChangeListener="#{treeBean.processSelectionChange}"
            toggleListener="#{treeBean.processToggle}">

            <it:treeSelectionChangeListener type="org.richfaces.demo.TreeBean$SelectionChangeHandler" />
            <it:treeToggleListener type="org.richfaces.demo.TreeBean$ToggleHandler" />

            <it:treeNode toggleListener="#{treeBean.processToggle}">
                <it:treeToggleListener type="org.richfaces.demo.TreeBean$ToggleHandler" />

            #{node.data}
        </it:treeNode>
        </it:tree>

    Toggle node event:
    <it:tree toggleNodeEvent="#{treeBean.toggleNodeEvent}" var="node" value="#{treeBean.rootNodes}"
            selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}">
            <it:treeNode>
            #{node.data}
        </it:treeNode>
        </it:tree>

    execute/render:
    <h:panelGrid columns="2" id="executeRenderTreeGrid">
            <it:tree var="node" value="#{treeBean.rootNodes}" execute="executeRenderTreeGrid" render="selectionIndicator"
                selection="#{treeBean.selection}" selectionType="#{treeBean.selectionType}" toggleType="#{treeBean.toggleType}">
                <it:treeNode>
                #{node.data}
            </it:treeNode>
            </it:tree>

            <h:panelGroup layout="block" id="selectionIndicator" style="margin-left: 50px;">
            Current time: #{treeBean.currentTimeAsString}

            <br />

            Current selection: #{treeBean.selection}

            <br />

            Test text:
            <h:inputText value="#{treeBean.executeTestText}" />

                <br />

                <a4j:outputPanel ajaxRendered="true">
                Current time: #{treeBean.currentTimeAsString}
                <br />
                    <h:outputText value="#{treeBean.executeTestText}" />
                </a4j:outputPanel>

            </h:panelGroup>
        </h:panelGrid>

    'handleLoading' facet:
    <it:tree value="#{treeBean.rootNodes}" toggleType="ajax" var="node">
            <it:treeNode>
                <f:facet name="handleLoading">
                    <h:graphicImage value="/images/loading.gif" />
                </f:facet>

            #{node}
        </it:treeNode>
        </it:tree>

    'handleLoading' without facet:
    <it:tree value="#{treeBean.rootNodes}" toggleType="ajax" var="node" styleClass="loadingWithoutFacet" />

        <a4j:queue />

        <a4j:log />
    </h:form>
</h:body>
</html>
